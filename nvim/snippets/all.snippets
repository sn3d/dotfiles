snippet d10 ""
//go:build ignore
#include <linux/bpf.h>
#include <bpf/bpf_helpers.h>

SEC("xdp")
int kcd_prog(struct xdp_md *ctx) {
    bpf_printk("Hello KCD");
    return XDP_PASS;
}

char LICENSE[] SEC("license") = "Dual BSD/GPL";
endsnippet


snippet d11 "we have headers"
//go:build ignore
#include <linux/bpf.h>
#include <bpf/bpf_helpers.h>


endsnippet

snippet d12 "we have a entry point for program"
SEC("xdp")
int kcd_prog(struct xdp_md *ctx) {
} 
endsnippet

snippet d13 "will return PASS means all packets will pass to netstack"
return XDP_PASS;
endsnippet

snippet d14 "will print some message"
bpf_printk("Hello KCD");
endsnippet

snippet d15 "and license"
char LICENSE[] SEC("license") = "Dual BSD/GPL";
endsnippet
 






snippet d21 ""
//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -cc clang -cflags "-g -O2" bpf kcd.c -- -I/usr/include/x86_64-linux-gnu
endsnippet

snippet d22 "" 
	// load my BPF program into kernel
	objs := bpfObjects{}
	err := loadBpfObjects(&objs, nil); err != nil 
	if err != nil {
		log.Fatalf("error loading BPF program: %s", err)
	}
	defer objs.Close()
endsnippet


snippet d23 "i need interface index"
	// we need interface index, look up the interface by name
	iface, err := net.InterfaceByName(os.Args[1])
	if err != nil {
		log.Fatalf("error in lookup network interface %s: %s", os.Args[1], err)
	}
endsnippet


snippet d24 "attach BPF program to interface"
// Attach the program
l, err := link.AttachXDP(link.XDPOptions{
	Program:   objs.KcdProg,
	Interface: iface.Index,
})
if err != nil {
	log.Fatalf("error in attaching XDP program: %s", err)
}
defer l.Close()
endsnippet


snippet d25 "wait for ctrl+c"
fmt.Println("Press Ctrl+C to exit...") 
ticker := time.NewTicker(1 * time.Second)
defer ticker.Stop()
for range ticker.C {
	// do nothing
}
endsnippet


snippet d31 "let's create map"
struct {
	__uint(type, BPF_MAP_TYPE_LRU_HASH);
	__uint(max_entries, MAX_MAP_ENTRIES);
	__type(key, __u32);   // IPv4 address
	__type(value, __u32); // packet count
} kcd_map SEC(".maps");
endsnippet


snippet d32 "we need parse dest. IP"
static __always_inline int parse_dest_addr(struct xdp_md *ctx, __u32 *ip_dest_addr) {
	void *data_end = (void *)(long)ctx->data_end;
	void *data     = (void *)(long)ctx->data;

	// ethernet header parsing
	struct ethhdr *eth = data;
	if ((void *)(eth + 1) > data_end) {
		return 0;
	}

	// the protocol need to be IPv4
	if (eth->h_proto != bpf_htons(ETH_P_IP)) {
		return 0;
	}

	// IP header parsing
	struct iphdr *ip = (void *)(eth + 1);
	if ((void *)(ip + 1) > data_end) {
		return 0;
	}

	// Fill the IP address into ip_dest_addr
	*ip_dest_addr = (__u32)(ip->daddr);
	return 1;
}
endsnippet

snippet d33 "let's parse given context"
__u32 ip;
if (!parse_dest_addr(ctx, &ip)) {
	return XDP_PASS;
}
endsnippet

snippet d34 "increase counter for addres"
__u32 *pkt_count = bpf_map_lookup_elem(&kcd_map, &ip);
if (!pkt_count) {
	__u32 init_pkt_count = 1;
	bpf_map_update_elem(&kcd_map, &ip, &init_pkt_count, BPF_ANY);
} else {
	__sync_fetch_and_add(pkt_count, 1);
}
endsnippet

snippet d35 "we need headers"
#include <linux/bpf.h>
#include <linux/in.h>
#include <linux/if_ether.h>
#include <linux/ip.h>

#include <bpf/bpf_helpers.h>
#include <bpf/bpf_endian.h>
endsnippet


snippet d36 "read the map"
func printMap(m *ebpf.Map) {
	var srcIP []byte
	var packetCount uint32

	i := m.Iterate()
	for i.Next(&srcIP, &packetCount) {
		fmt.Printf("%s = %d \n", net.IP(srcIP), packetCount)
	}
}
endsnippet
